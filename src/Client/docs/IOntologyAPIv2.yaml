openapi: 3.0.3
info:
  version: 0.7.1
  title: Ontology DB Api - v2
  description: |-
    Documentation for the Swate Ontology DB Api. If you feel like there ist information missing, feel free to contact me directly via issues in the [Swate repository](https://github.com/nfdi4plants/Swate/issues).

    General documentation can be found here ([Swate docs](https://nfdi4plants.github.io/Swate-docs/)).
  contact: 
    email: info@nfdi4plants.org
servers:
  - url: "https://swate.nfdi4plants.org"
    description: "Production"
  - url: "https://localhost:3000"
    description: "Development"
  - url: "http://localhost:5000"
    description: "Local Production Test"
paths:
  /api/IOntologyAPIv2/getTestNumber:
    get:
      summary: "Test function to verify client server connection."
      description: "This function is only used for testing connection. If client has connection to server this request will return `42`."
      operationId: getTestNumber
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: integer
              examples:
                Only_Result: 
                  summary: This api must always return 42.
                  value: 42
  /api/IOntologyAPIv2/getAllOntologies:
    get:
      summary: "Returns all ontologies found in the database."
      description: "Returns all ontologies in the database. This includes not only the ontologies specifically imported, but also the ones created due to external term references in such ontologies.
      
      This means: not all ontologies listed here are fully contained in the database.
      
      - Look [here](https://github.com/nfdi4plants/nfdi4plants_ontology/blob/main/ext_ontologies.include) for a list of all ontologies imported to the database.
      
      "
      operationId: getAllOntologies
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ontology'
              example:
                - Name: "pato"
                  Version: "releases/2022-08-31/pato.obo"
                  LastUpdated: "2022-10-11T12:32:27.0000000"
                  Author: "releases/2022-08-31/pato.obo"
                - Name: "peco"
                  Version: "releases/2020-08-21"
                  LastUpdated: "2022-10-11T12:32:27.0000000"
                  Author: "releases/2020-08-21"
  /api/IOntologyAPIv2/getTermSuggestions:
    post:
      summary: "Query the database for terms by their name."
      description: "This function is used for the autocomplete term search.
      
      - Integer is used to determine the number of results returned. Returning the best fitting results first.

      - Query by term name or term accession if the query string matches this regex pattern `[\\w]+?:[\\d]+`.

      - If query string is shorter than 3 characters it will only return exact matches.

      - Searching multiple words (Example: `instrument mod`) will be parsed to `+instrument (mod^4 OR mod*)`. This means the result MUST include `instrument` and weights perfect fit `mod` higher than any autocomplete option.
      "
      operationId: getTermSuggestions
      requestBody:
        description: Search db for terms
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                type: object
                properties:
                  n: 
                    description: Number of terms returned
                    type: integer
                  query: 
                    description: Search string
                    type: string
                  ontology:
                    description: name of source ontology
                    type: string
                required:
                  - n
                  - query
            examples:
              term_name:
                summary: Example search by term name
                value: 
                    - n: 5
                      query: "instrument mod"
              term_accession:
                summary: Example search by term id
                value:
                    - n: 5
                      query: "MS:1000031"
              term_name from ms:
                summary: Example search by term name in ms ontology
                value: 
                    - n: 5
                      query: "instrument mod"
                      ontology: "ms"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getTermSuggestionsByParentTerm:
    post:
      summary: "Query all children of parent_term for terms by their name."
      description: "This function is used for the autocomplete term search.
      
      - Searches only through children of `parent_term`. Children are Terms which have a relationship (`is_a`, `part_of`, ...) directed to `parent_term.`
        For example: Bacteria is_a Organism (Bacteria is a child term of Organism). This api queries all children and not only direct children.

      - Integer is used to determine the number of results returned. Returning the best fitting results first.

      - Query by term name or term accession if the query string matches this regex pattern `[\\w]+?:[\\d]+`.

      - If query string is shorter than 3 characters it will only return exact matches.

      - Searching multiple words (Example: `instrument mod`) will be parsed to `+instrument (mod^4 OR mod*)`. This means the result MUST include `instrument` and weights perfect fit `mod` higher than any autocomplete option.
      "
      operationId: getTermSuggestionsByParentTerm
      requestBody:
        description: Search db for child terms of parent
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                type: object
                properties:
                  n: 
                    description: Number of terms returned
                    type: integer
                  query: 
                    description: Search string
                    type: string
                  parent_term:
                    $ref: '#/components/schemas/TermMinimal'
            examples:
              term_sciex:
                summary: Search for `SCIEX` with parent `instrument model`
                value: 
                    - n: 5
                      query: "SCIEX"
                      parent_term:
                        Name: "instrument model"
                        TermAccession: "MS:1000031"
              term_triple:
                summary: Search for `Triple` with parent `instrument model`
                value: 
                    - n: 5
                      query: "Triple"
                      parent_term:
                        Name: "instrument model"
                        TermAccession: "MS:1000031"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getAllTermsByParentTerm:
    post:
      summary: "Return all children of parent_term."
      description: "This function returns all children of parent_term.
      
      - Returns children of `parent_term`. Children are Terms which have a relationship (`is_a`, `part_of`, ...) directed to `parent_term.`
        For example: Bacteria is_a Organism (Bacteria is a child term of Organism). This api queries all children and not only direct children.
      "
      operationId: getAllTermsByParentTerm
      requestBody:
        description: Return child terms of parent
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                $ref: '#/components/schemas/TermMinimal'
            examples:
              instrument_model:
                summary: Return all children of `instrument model`
                value: 
                    - Name: "instrument model"
                      TermAccession: "MS:1000031"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getTermSuggestionsByChildTerm:
    post:
      summary: "Query all parents of child_term for terms by their name."
      description: "

      - Searches only through parents of `child_term`. Children are Terms which have a relationship (`is_a`, `part_of`, ...) directed to `parent_term.`
        For example: Bacteria is_a Organism (Bacteria is a child term of Organism).

      - Integer is used to determine the number of results returned. Returning the best fitting results first.

      - Query by term name or term accession if the query string matches this regex pattern `[\\w]+?:[\\d]+`.

      - If query string is shorter than 3 characters it will only return exact matches.

      - Searching multiple words (Example: `instrument mod`) will be parsed to `+instrument (mod^4 OR mod*)`. This means the result MUST include `instrument` and weights perfect fit `mod` higher than any autocomplete option.
      "
      operationId: getTermSuggestionsByChildTerm
      requestBody:
        description: Search db for parent terms of child term
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                type: object
                properties:
                  n: 
                    description: Number of terms returned
                    type: integer
                  query: 
                    description: Search string
                    type: string
                  child_term:
                    $ref: '#/components/schemas/TermMinimal'
            examples:
              term_sciex:
                summary: Search for `Organism` from child `Chlamydomonas reinhardtii`
                value: 
                    - n: 5
                      query: "Organism"
                      child_term:
                        Name: "Chlamydomonas reinhardtii"
                        TermAccession: "NCBITaxon:3055"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getAllTermsByChildTerm:
    post:
      summary: "Return all parents of child_term."
      description: "This function returns all parents of child_term.
      
      - Returns parents of `child_term`. Children are Terms which have a relationship (`is_a`, `part_of`, ...) directed to `parent_term.`
        For example: Bacteria is_a Organism (Bacteria is a child term of Organism).
      
      "
      operationId: getAllTermsByChildTerm
      requestBody:
        description: Search db for parent terms of child term
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                type: object
                properties:
                  n: 
                    description: Number of terms returned
                    type: integer
                  query: 
                    description: Search string
                    type: string
                  child_term:
                    $ref: '#/components/schemas/TermMinimal'
            examples:
              minute:
                summary: Return all parents of child `minute`
                value: 
                    - Name: "minute"
                      TermAccession: "UO:0000031"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getTermsForAdvancedSearch:
    post: 
      summary: "Return all parents of child_term."
      description: "This function searches the db for term name or term definition.
      
      - This api can be used with [Apache Lucene syntax](https://nfdi4plants.github.io/Swate-docs/docs/UserDocs/Docs07-Advanced-Term-Search.html#apache-lucene-query-parser-syntax).

      "
      operationId: getTermsForAdvancedSearch
      requestBody:
        description: "Advanced search by name or/and definition powered by apache lucene syntax."
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                $ref: '#/components/schemas/AdvancedSearchOptions'
            examples:
              organism:
                summary: "Organism"
                value: 
                    - TermName: "Organism"
                      TermDefinition: ""
                      KeepObsolete: false
              plus_model:
                summary: "instrument +model"
                value:
                  - OntologyName: ms
                    TermName: instrument +model
                    TermDefinition: ""
                    KeepObsolete: false
              not_sciex:
                summary: "instrument model NOT SCIEX"
                value:
                  - TermName: instrument model NOT SCIEX
                    TermDefinition: ""
                    KeepObsolete: false
              peptidase:
                summary: "peptidase inhibitor in definition"
                value:
                  - TermName: ""
                    TermDefinition: "\"peptidase inhibitor\""
                    KeepObsolete: false
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Term'
  /api/IOntologyAPIv2/getTreeByAccession:
    post:
      summary: "Returns tree of closest 20 terms."
      description: "This feature is not fully developed yet. Please let us know what options you'd like to see for this.
      
      - Returns closest 20 terms using the neo4j \"apoc.path.spanningTree\" function
      
      "
      operationId: getTreeByAccession
      requestBody:
        description: Return closest 20 terms of term defined by accession.
        content:
          application/json:
            schema:
              type: array
              maxItems: 1
              items:
                type: string
                format: "[\\w]+?:[\\d]+"
            examples:
              minute:
                summary: minute
                value: 
                    - "UO:0000031"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
components:
  schemas:
    Term:
      type: object
      properties:
        Accession:
          description: unique identifer to term
          type: string
        Name:
          type: string
        Description:
          type: string
        IsObsolete:
          type: boolean
        FK_Ontology:
          description: the source ontology
          type: string
      required:
      - Accession
      - Name
      - Description
      - IsObsolete
      - FK_Ontology
    Ontology:
      type: object
      properties:
        Name:
          type: string
        Version:
          type: string
        LastUpdated:
          type: string
          format: "date-time"
        Author:
          type: string
      required:
      - Name
      - Version
      - LastUpdated
      - Author
    TermMinimal:
      type: object
      properties:
        Name:
          description: This is the ontology term name
          type: string
        TermAccession:
          description: This is the ontology term accession 'XX:aaaaaa'
          type: string
      required:
      - Name
      - TermAccession
    AdvancedSearchOptions:
      description: One of TermName or TermDescription MUST NOT be ""
      type: object
      properties:
        OntologyName: 
          type: string
        TermName: 
          type: string
        TermDefinition: 
          type: string
        KeepObsolete:
          type: boolean
      required:
      - TermName
      - TermDescription
      - KeepObsolete
    TreeTerm:
      type: object
      properties:
        NodeId: 
          type: integer
        Term: 
          $ref: '#/components/schemas/Term'
    TreeRelationship:
      type: object
      properties:
        RelationshipId:
          type: integer
        StartNodeId: 
          type: integer
        EndNodeId:
          type: integer
        Type: 
          type: string 
    Tree:
      type: object
      properties:
        Nodes: 
          type: array
          items:
            $ref: '#/components/schemas/TreeTerm'
        Relationships:
          type: array
          items:
            $ref: '#/components/schemas/TreeRelationship'

